{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "5593d497-75f2-419c-99f3-6f2d841d1ebe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "18 14 5 18\n"
     ]
    }
   ],
   "source": [
    "def grocery_cost(num_apples, num_oranges):\n",
    "# Take in number of apples and oranges and return totoal cost of groceries\n",
    "    price_apples = 3\n",
    "    price_oranges = 2\n",
    "    cost_of_apples = num_apples * price_apples\n",
    "    cost_of_oranges = num_oranges * price_oranges\n",
    "    total_cost = cost_of_oranges + cost_of_apples\n",
    "    return total_cost\n",
    "    \n",
    "# How many purchased by team\n",
    "    \n",
    "Omar = grocery_cost(4, 3)\n",
    "Darius = grocery_cost(2,4)\n",
    "W = grocery_cost(1, 1)\n",
    "Belle = grocery_cost(2,6) \n",
    "print(Omar, Darius, W, Belle)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "618ae570-8b6e-48ad-ad22-4028bacace9b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chris has to pay: 212\n",
      "Chris has to pay 212\n"
     ]
    }
   ],
   "source": [
    "# Task 1 - Define a function to calculate total cost\n",
    "def Orchard(price_of_strawberries, price_of_cherries, weight_of_strawberries, weight_of_cherries):\n",
    "    cost_of_strawberries = price_of_strawberries * weight_of_strawberries\n",
    "    cost_of_cherries = price_of_cherries * weight_of_cherries\n",
    "    total_cost = cost_of_strawberries + cost_of_cherries\n",
    "    return total_cost\n",
    "    \n",
    "# Task 2 - Use the function and calculate total payment\n",
    "# Prices\n",
    "\n",
    "price_of_cherries = 10\n",
    "price_of_strawberries = 7\n",
    "\n",
    "# Calculate for each person\n",
    "Gabby = Orchard(price_of_strawberries, price_of_cherries, 4, 3)\n",
    "Omar = Orchard(price_of_strawberries, price_of_cherries, 5, 3)\n",
    "Naeem = Orchard(price_of_strawberries, price_of_cherries, 7, 4)\n",
    "\n",
    "# Total Chris has to pay\n",
    "Chris_has_to_pay = Gabby + Omar + Naeem\n",
    "print(\"Chris has to pay:\", Chris_has_to_pay)\n",
    "\n",
    "# Cherry Grove orchard 2\n",
    "\n",
    "def Orchard2(price_of_strawberries, price_of_cherries, weight_of_strawberries, weight_of_cherries):\n",
    "    \n",
    "# Prices\n",
    "    price_of_cherries = 11\n",
    "    price_of_strawberries = 5\n",
    "\n",
    "# Calculate for each person\n",
    "    Belle = Orchard2(price_of_strawberries, price_of_cherries, 5, 7) \n",
    "    W = Orchard2(price_of_strawberries, price_of_cherries, 2, 2)\n",
    "\n",
    "# Total Chris has to pay\n",
    "    Chris_has_to_pay = Belle + W\n",
    "print(\"Chris has to pay\", Chris_has_to_pay)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "1298c7ef-bbca-4c22-a571-44eee293e381",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Chris has to pay at Orchard 1: 212\n",
      "Chris has to pay at Orchard 2: 134\n",
      "Total Chris has to pay at both orchards: 346\n"
     ]
    }
   ],
   "source": [
    "# Orchard 1\n",
    "def Orchard(price_of_strawberries, price_of_cherries, weight_of_strawberries, weight_of_cherries):\n",
    "    cost_of_strawberries = price_of_strawberries * weight_of_strawberries\n",
    "    cost_of_cherries = price_of_cherries * weight_of_cherries\n",
    "    total_cost = cost_of_strawberries + cost_of_cherries\n",
    "    return total_cost\n",
    "\n",
    "# Prices for Orchard 1\n",
    "price_of_cherries_1 = 10\n",
    "price_of_strawberries_1 = 7\n",
    "\n",
    "# Calculate cost for each person at Orchard 1\n",
    "Gabby = Orchard(price_of_strawberries_1, price_of_cherries_1, 4, 3)\n",
    "Omar = Orchard(price_of_strawberries_1, price_of_cherries_1, 5, 3)\n",
    "Naeem = Orchard(price_of_strawberries_1, price_of_cherries_1, 7, 4)\n",
    "\n",
    "# Total Chris pays at Orchard 1\n",
    "Chris_has_to_pay_1 = Gabby + Omar + Naeem\n",
    "print(\"Chris has to pay at Orchard 1:\", Chris_has_to_pay_1)\n",
    "\n",
    "# Orchard 2\n",
    "def Orchard2(price_of_strawberries, price_of_cherries, weight_of_strawberries, weight_of_cherries):\n",
    "    cost_of_strawberries = price_of_strawberries * weight_of_strawberries\n",
    "    cost_of_cherries = price_of_cherries * weight_of_cherries\n",
    "    total_cost = cost_of_strawberries + cost_of_cherries\n",
    "    return total_cost\n",
    "\n",
    "# Prices for Orchard 2\n",
    "price_of_cherries_2 = 11\n",
    "price_of_strawberries_2 = 5\n",
    "\n",
    "# Calculate cost for each person at Orchard 2\n",
    "Belle = Orchard2(price_of_strawberries_2, price_of_cherries_2, 5, 7)\n",
    "W = Orchard2(price_of_strawberries_2, price_of_cherries_2, 2, 2)\n",
    "\n",
    "# Total Chris pays at Orchard 2\n",
    "Chris_has_to_pay_2 = Belle + W\n",
    "print(\"Chris has to pay at Orchard 2:\", Chris_has_to_pay_2)\n",
    "\n",
    "# Grand Total (optional)\n",
    "grand_total = Chris_has_to_pay_1 + Chris_has_to_pay_2\n",
    "print(\"Total Chris has to pay at both orchards:\", grand_total)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "faccec12-9ad1-42f7-a8ea-46ddc6a947a2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Darius's lunch cost: 11\n",
      "Belle's lunch cost: 11\n",
      "Amel's lunch cost: 15\n"
     ]
    }
   ],
   "source": [
    "# Step 1 – Define the Cost_Of_Lunch function\n",
    "def Cost_Of_Lunch(num_Pita, num_Lentil_Soup, num_Falafel):\n",
    "    price_Pita = 1\n",
    "    price_Lentil_Soup = 2\n",
    "    price_Falafel = 3\n",
    "    \n",
    "    cost_Pita = num_Pita * price_Pita\n",
    "    cost_Lentil_Soup = num_Lentil_Soup * price_Lentil_Soup\n",
    "    cost_Falafel = num_Falafel * price_Falafel\n",
    "    \n",
    "    total_cost = cost_Pita + cost_Lentil_Soup + cost_Falafel\n",
    "    return total_cost\n",
    "\n",
    "# Step 2 – Use the function to calculate total payment for each person\n",
    "Darius = Cost_Of_Lunch(1, 2, 2)\n",
    "Belle = Cost_Of_Lunch(1, 2, 2)\n",
    "Amel = Cost_Of_Lunch(3, 3, 2)\n",
    "\n",
    "# Step 3 – Print the cost for each person\n",
    "print(\"Darius's lunch cost:\", Darius)\n",
    "print(\"Belle's lunch cost:\", Belle)\n",
    "print(\"Amel's lunch cost:\", Amel)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "82e1d7ca-a51e-4194-91c0-619ebb8548d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define celsius to Fahrenheit\n",
    "\n",
    "def cels_to_fahr(C):\n",
    "\n",
    "# Equation for Fahrenheit\n",
    "    F = C * 9/5 + 32\n",
    "\n",
    "    return F"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "id": "29f6f099-5285-448b-ac3c-be285c3ab354",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "71.6\n"
     ]
    }
   ],
   "source": [
    "Ideal_temperture = cels_to_fahr(22)\n",
    "print(Ideal_temperture)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "499d274b-aa73-403c-9755-d20c6ecb9987",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define Fahrenheit to Celsius\n",
    "\n",
    "def fahr_to_cels(F):\n",
    "\n",
    "# Equation for Celsius \n",
    "    C = (F-32)*5/9\n",
    "\n",
    "    return C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "1e16c47f-2f35-4512-8ab9-efbb2dad9e11",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "21.999999999999996\n"
     ]
    }
   ],
   "source": [
    "Celsius_Temp = fahr_to_cels(71.6)\n",
    "print(Celsius_Temp)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "6ea5fbdd-e66b-4b2d-8756-daeecac4b011",
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (3413721147.py, line 13)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;36m  Cell \u001b[1;32mIn[113], line 13\u001b[1;36m\u001b[0m\n\u001b[1;33m    if  [2] =< 500:\u001b[0m\n\u001b[1;37m            ^\u001b[0m\n\u001b[1;31mSyntaxError\u001b[0m\u001b[1;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "# Notes for budget spending \n",
    "# M T W Th F, Budget $500 \n",
    "\n",
    "import numpy as np\n",
    "\n",
    "# Step 2: Creating Arrays\n",
    "# Creating a 1D array\n",
    "array1 = np.array([300, 700, 100, 800, 200])\n",
    "print(\"1D Array:\", array1)\n",
    "\n",
    "# Step 3 Adding over budget error \n",
    "\n",
    "if  [2] < 500:\n",
    "    print('Flag')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b00a994-c249-4cd1-a91a-d5b2e5dc5968",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
