{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "3c599cd6-077f-4550-9e32-c6bd649559bb",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "([1, 2, 3], [4, 5, 6], [7, 8, 9])\n"
     ]
    }
   ],
   "source": [
    "# Create a 2d array\n",
    "\n",
    "My_2d_Array = [1, 2, 3] , [4, 5, 6] , [7, 8, 9]\n",
    "print(My_2d_Array)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "622921ca-0bc8-4524-ac13-4b9ffa40197f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Initial array:\n",
      "[[0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n",
      "\n",
      "After changing My_2d_Array[0, 0] to 4:\n",
      "[[4. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n",
      "\n",
      "After setting entire row 0 to 1:\n",
      "[[1. 1. 1. 1.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n",
      "\n",
      "After setting all rows to 0:\n",
      "[[0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]\n",
      " [0. 0. 0. 0.]]\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "\n",
    "# Create a 2D array of zeros with 3 rows and 4 columns\n",
    "My_2d_Array = np.zeros((3, 4))\n",
    "print(\"Initial array:\")\n",
    "print(My_2d_Array)\n",
    "print()\n",
    "\n",
    "# Change a single element (row 0, column 0) to 4\n",
    "My_2d_Array[0, 0] = 4\n",
    "print(\"After changing My_2d_Array[0, 0] to 4:\")\n",
    "print(My_2d_Array)\n",
    "print()\n",
    "\n",
    "# Change an entire row (row 0) to all 1s\n",
    "My_2d_Array[0] = 1\n",
    "print(\"After setting entire row 0 to 1:\")\n",
    "print(My_2d_Array)\n",
    "print()\n",
    "\n",
    "# To set all rows to 0, use [:] instead of [:0]\n",
    "My_2d_Array[:] = 0\n",
    "print(\"After setting all rows to 0:\")\n",
    "print(My_2d_Array)\n"
   ]
  },
  {
   "cell_type": "raw",
   "id": "21572eb8-6793-4374-b78a-90d7850d19fc",
   "metadata": {},
   "source": [
    "to generate a random number, we use the random.randint(a,b) function. generates a random number from a to b"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8dd6d13f-8145-4166-93db-6b2c8bff5ccc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n"
     ]
    }
   ],
   "source": [
    "random_number = np.random.randint(0,6)\n",
    "print(random_number)"
   ]
  },
  {
   "cell_type": "raw",
   "id": "147b8783-feb9-4b87-a3ad-842e571c669b",
   "metadata": {},
   "source": [
    "to generate a random choice from a list, we need to use np.random.choice(list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "60def7fa-fe61-4761-9898-3e0ac803522b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pizza\n"
     ]
    }
   ],
   "source": [
    "lunch_options = ['Mac and Cheese', 'Pizza', 'Salad']\n",
    "what_i_want_to_eat = np.random.choice(lunch_options)\n",
    "print(what_i_want_to_eat)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b69e3ca1-83d1-4415-a469-81cae0bc936c",
   "metadata": {},
   "source": [
    "Matplotlib"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8faacdb-e8a8-4320-abe3-07e8aca54db7",
   "metadata": {},
   "source": [
    "Libraries = a collection of a bunch of functions, you need to import a library if you want to use its function.\n",
    "\n",
    "matplotlib have been using pyplot section of matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5ebe5284-8771-4177-8f83-42a9bb9f6442",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt  # Make sure to import matplotlib\n",
    "\n",
    "# Define the data\n",
    "List_1 = [1, 2, 3, 4]\n",
    "List_2 = [10, 20, 30, 40]\n",
    "\n",
    "# Create the plot\n",
    "plt.plot(List_1, List_2)\n",
    "\n",
    "# Set title and labels correctly (use functions, not assignment)\n",
    "plt.title('My first plot')\n",
    "plt.xlabel('X Values')\n",
    "plt.ylabel('Y Values')\n",
    "\n",
    "# Show the plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2c27c838-8e6c-4a21-9eba-ad48a5b23ede",
   "metadata": {},
   "outputs": [],
   "source": [
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9344bf00-6456-4e7a-b2b7-2c089fe9d27c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
